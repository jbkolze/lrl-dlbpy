import time
from datetime import datetime
from os.path import exists
import re
import urllib.request
from tkinter import *
from tkinter import filedialog
from tkinter import font as tkFont
from tkinter import messagebox as mb
import os
from typing import Dict, List, Tuple
import json
import ratings
from PIL import ImageGrab
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.dates import DateFormatter, DayLocator
from matplotlib.ticker import FormatStrFormatter
import seaborn as sns
import pandas as pd

pd.plotting.register_matplotlib_converters()
def interpolateCurve(ys,xs,target_x):
    if target_x in xs:
        return ys[xs.index(target_x)]
    i = 0
    while target_x > xs[i]:
        i += 1
    y0 = ys[i-1]
    y1 = ys[i]
    x0 = xs[i-1]
    x1 = xs[i]
    return y0 + (target_x - x0)*(y1-y0)/(x1-x0)
def getTargetElevation(date,lake, ruleCurve):
    month, day, year = date.split('/')
    julianDate = datetime(int(year),int(month),int(day))
    tt = julianDate.timetuple()
    julianDay = tt.tm_yday
    julianRuleCurve = {}
    for key in ruleCurve.keys():
        julianKey = datetime(int(year),int(key.split('/')[0]),int(key.split('/')[1])).timetuple().tm_yday
        julianRuleCurve[julianKey] = ruleCurve[key]
    xs = []
    for x in julianRuleCurve.keys():
        xs.append(x)
    ys = []
    for x in xs:
        ys.append(julianRuleCurve[x])
    return interpolateCurve(ys,xs,julianDay)

class EntryLabel(Message):
    """A standard Message object with default parameters for dlbpy.
    
    Default settings for EntryLabel include:
    - justify = CENTER
    - aspect = 200
    """

    def __init__(self, parent: Widget, text: str, **kwargs):
        """Inits an EntryLabel with the specified text in the specified frame.
        Args:
            parent: The parent frame of the EntryLabel.
            text: The text to be displayed in the EntryLabel.
        """
        super().__init__(
            parent,
            text=text,
            justify=CENTER,
            aspect=200,
            **kwargs,
        )


class DlbLabelFrame(LabelFrame):
    """A standard LabelFrame object with default parameters for dlbpy.
    Default settings for DlbLabelFrame include:
    - borderwidth = 2
    - padx = 2
    - pady = 2
    """

    def __init__(self, parent: Widget, text: str, **kwargs):
        """Inits a DlbLabelFrame with the specified title in the specified frame.
        Args:
            parent: The parent frame of the DlbLabelFrame.
            text: The title to be displayed on the LabelFrame.
        """
        super().__init__(
            parent,
            text=text,
            borderwidth=2,
            padx=5,
            pady=5,
            bg='white',
            **kwargs,
        )


def build_plot(parent: Widget, data: Dict[str, float], title: str, limits: List[float] = None):
    """Constructs a standard line-plot of the provided data as a Tkinter canvas.
    Args:
        parent: The parent frame of the plot.
        data: A dict of the data to be plotted (x: y).
        title: The title to be displayed on the plot.
        limit: An optional list of [NWS flood stage, WCM (rising) limit]
    Returns:
        FigureCanvasTkAgg: A mock-canvas generated by the matplotlib library.  Standard
            tk functions can be accessed through the method get_tk_widget().
    """
    sns.set()
    sns.set_context("paper")
    sns.set_style("whitegrid")
    f, ax = plt.subplots(1, 1, figsize=(2, 2), dpi=100, constrained_layout=True)
    times = [datetime.strptime(x, '%Y-%m-%d %H:%M') for x in list(data.keys())]
    values = list(data.values())
    sns.lineplot(times, values, ax=ax)
    sns.despine(f, ax)
    plt.xticks(rotation=90)
    plt.title(title)
    Y,M,D,h,m,s,wd,yd,dst = time.localtime(time.time()-7*24*60*60)
    X1 = datetime(Y,M,D,0,0)
    Y,M,D,h,m,s,wd,yd,dst = time.localtime()
    X2 = datetime(Y,M,D,6,0)
    plt.xlim([X1,X2])
    ax.xaxis.set_major_locator(DayLocator())
    ax.xaxis.set_major_formatter(DateFormatter('%b %d'))
    ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
    if limits:
        set_plot_limits(limits)
    canvas = FigureCanvasTkAgg(f, master=parent)
    return canvas

def set_plot_limits(limits: List[float]):
    """Appends stage limit markers to the active plot using a standard form.

    Args:
        limits: A list of floats containing [NWS flood stage, WCM (rising) limit]
    """
    line_options = [
        ['red', 'dashed'],
        ['black', 'dotted'],
    ]
    for i, limit in enumerate(limits):
        if limit:
            opts = line_options[i]
            plt.axhline(limit, color=opts[0], ls=opts[1])


def Interpolate(Data,datestamp):
    """Checks the data to see if the datestamp is within the dataset and interpolate if not
        Return:
            float|str: Value, Interpolated value or empty string if there isn't data within 59 minutes above and below the value to interpolate from
    """
    try:
        return Data[datestamp]
    except:
        x = time.mktime(time.strptime(datestamp,'%Y-%m-%d %H:%M'))
        dates = list(Data.keys())
        dates.sort()
        i = 0
        while dates[i]< datestamp:
            i+=1
        x1,x2 =time.mktime(time.strptime(dates[i-1],'%Y-%m-%d %H:%M')),time.mktime(time.strptime(dates[i],'%Y-%m-%d %H:%M'))
        y1,y2 = Data[dates[i-1]],Data[dates[i]]
        if abs (x-x1) < 59*60 and abs (x-x2) < 59*60:
            return round(y1 + (x-x1)*((y2-y1)/(x2-x1)),2)
        else:
            return ''
def LastGood(Data,datestamp,minutes_back=60):
    try:
        return Data[datestamp]
    except:
        try:
            x = time.mktime(time.strptime(datestamp,'%Y-%m-%d %H:%M'))
            dates = list(Data.keys())
            dates.sort()
            i = -1
            diff = minutes_back*2*60
            while (abs(time.mktime(time.strptime(dates[i],'%Y-%m-%d %H:%M')) - x) <= minutes_back*60) or time.mktime(time.strptime(dates[i],'%Y-%m-%d %H:%M')) > x:
                if abs(time.mktime(time.strptime(dates[i],'%Y-%m-%d %H:%M')) - x) <= diff:
                    diff = abs(time.mktime(time.strptime(dates[i],'%Y-%m-%d %H:%M')) - x)
                    return_value = Data[dates[i]]
                i -= 1
            return return_value
        except:
            return ''
    
def GetBasin(lake):
    """Checks the basin_lakes dictionary for the lake code
        Returns:
            str: A string containing the basin code or an empty string if the lake code
            is not valid
    """
    basin_lakes = {'GRB':['GRR','NRR','BRR','RRR'],'MAB':['WFR','CBR','CCK','WHL'],
               'MWB':['CHL','CMR','MNR','PRR'],'SRB':['TVL'],'UKL':['CFK','BHR','CRR'],
               'UWB':['HTR','SRR','MSR'],'WWB':['BVR']}
    for key in basin_lakes.keys():
        if lake in basin_lakes[key]:
            return key
    return ''
def pad(t,l,s):
    """Pads string t with character s until length is not less than l
        Returns:
            str: A string containing the contents of t with s appended to the front a number of times
            to make the total length equal to l
    """
    while len(t) < l:
        t = s+t
    return t
def datatypes(rdbfile):
    StartOfDD = False
    datatypes = []
    for line in rdbfile.split('\n'):
        if line[13:15] == 'TS':
            StartOfDD = 1
        try:
            if line[0] == '#'  and StartOfDD:
                matchobj = re.match('#\D*(\d+)\D*(\d\d\d\d\d)\s*([\w\s]+)([,\w\s\[\]]+)*([,\w\s\[\]]+)*([,\w\s\[\]]+)*([,\w\s\[\]]+)*',line)
                if matchobj:
                    datatypes.append(matchobj.groups())
        except:
            pass
    return datatypes
class gui:
    """Build the base menu to allow the selection of the lake for the DLB
    Lakes are presented in a dropdown menu sorted alphabeticly.  A "Load Entry Sheet" Button
    will launch the DLB Entry Form"""
    def __init__(self):
        self.testmode = False
        if self.testmode:
            self.directory = r'o:\ed\public\projectdata\ed-t\ed-tw-perm\dlb_testing'
        else:
            self.directory = r'o:\ed\public\dlb'
        self.master_dictionary = json.load(open(r'O:\ed\public\dlb\dlbpy\bin\master_dictionary.json','r'))
        lakelist = []
        for project in self.master_dictionary['projects'].keys():
            lakelist.append(self.master_dictionary['projects'][project]['name'])
        lakelist.sort()
        self.root = Tk()
        self.root.title('DLB Input Program')
        self.root.config(background='white')
        self.LaunchCanvas = Canvas(self.root)
        w, h = self.root.winfo_screenwidth(), self.root.winfo_screenheight()
        self.root.geometry("%dx%d+-10+0" % (w, h)) 
        self.LaunchCanvas.pack()
        self.tkvar = StringVar(self.root)
        self.tkvar.set('Choose Lake')
        helv = tkFont.Font(family='Helvetica', size=24)
        popupMenu1 = OptionMenu(self.LaunchCanvas, self.tkvar, *lakelist)
        popupMenu1.config(font=helv,width=30,height=5)
        self.root.nametowidget(popupMenu1.menuname).config(font=helv)
        popupMenu1.grid(row=0,column = 0, rowspan=2, columnspan=2)
        self.load_status = Label(self.LaunchCanvas,font=("Arial", 24))
        self.load_status.grid(row=5,column=0,columnspan=4)
        Launch = Button(self.LaunchCanvas,text="Load Entry Sheet",command = self.LoadDLB)
        Launch.config(width=45,height=5,bg='light blue',font=helv)
        Launch.grid(row=9, column =0, rowspan=2, columnspan=2)

        self.root.mainloop()
    def process_web_request(self,url):
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        html = response.read()
        html = html.decode('utf8')
        types = datatypes(html)
        return html,types
    def store_web_data(self,html,types,loc,parameter,special_code):
        for line in html.split('\n'):
            if line.split('\t')[0] == 'agency_cd':
                offset = line.split('\t').index(special_code+'_'+parameter)
            if line.split('\t')[0] == 'USGS':
                try:
                    self.Data[loc][line.split('\t')[2]] = float(line.split('\t')[offset])
                except:
                    pass
    def getData(self):
        """Retrieve data from USGS using the IDs and store the datestamped values in a dictionary object in the self.Data Object keyed off of the loc/parameter
        """
        self.Data = {}
        self.Data[self.lkname] = {}
        html, types = self.process_web_request('https://waterdata.usgs.gov/nwis/uv?cb_'+self.master_dictionary['usgs_codes']['Elev']+'=on&format=rdb&site_no='+self.project['usgs_id']+'&period=7')
        for i in range(len(types)):
                    if 'special_code' in self.project.keys():
                        special_code = self.project['special_code']
                    else:
                        special_code = types[i][0]
        self.store_web_data(html,types,self.lkname,self.master_dictionary['usgs_codes']['Elev'],special_code)
        self.Data['Tailwater'] = {}
        self.Data['WaterTemp'] = {}
        for loc in self.project["stations"]:
            try:
                self.Data[loc['name']] = {}
                self.load_status.configure(text="Getting " + loc['name'] + " Data from USGS")
                self.root.update_idletasks()
                html, types = self.process_web_request('https://waterdata.usgs.gov/nwis/uv?cb_'+self.master_dictionary['usgs_codes'][loc['parameter']]+'=on&format=rdb&site_no='+loc['usgs_id']+'&period=7')
                for i in range(len(types)):
                    if 'special_code' in loc.keys():
                        special_code = loc['special_code']
                    else:
                        special_code = types[i][0]
                self.store_web_data(html,types,loc['name'],self.master_dictionary['usgs_codes'][loc['parameter']],special_code)
            except:
                pass
                            
        for parm, usgs_code, field in [['Tailwater','00065','stage'],['WaterTemp','00010','temp']]:
            if self.project['tailwater'][field]['usgs_id']:
                html, types = self.process_web_request('https://waterdata.usgs.gov/nwis/uv?cb_'+self.master_dictionary['usgs_codes']["Tailwater"]+'=on&format=rdb&site_no='+self.project['tailwater'][field]['usgs_id']+'&period=7')
                if 'code' not in  self.project['tailwater'][field].keys():
                    for i in range(len(types)):
                        if usgs_code in types[i]:
                            special_code = types[i][0]
                else:
                    special_code = self.project['tailwater'][field]['code']
                for var in [html,parm,usgs_code,special_code]:
                    print (var)
                self.store_web_data(html,types,parm,usgs_code,special_code)
                        
    def LoadDLB(self):
        for key in self.master_dictionary['projects'].keys():
            if self.master_dictionary['projects'][key]['name'] == self.tkvar.get():
                self.lkname = key
                self.project = self.master_dictionary['projects'][key]
        self.getData()
        self.LaunchCanvas.destroy()
        self.Load_DLB_Interface()
         
    def Load_DLB_Interface(self):
        """Gui interface is built dynamiclly using dictionary lookups to setup gate configurations, data validation criteria, and river stations using the lake code as the lookup"""
        self.Validating = False
        newWindow = Frame(self.root)
        newWindow.config(background='white')
        newWindow.pack()
        self.infobox = Label(newWindow,font=("Arial", 10))
        self.infobox.grid(row=4,column=12,rowspan=2,columnspan=3)
        self.recheck = False
        self.flow = ratings.GateRatingSet(self.lkname)
        
        gate_settings_frame = self.build_gate_settings_frame(newWindow)
        gate_settings_frame.grid(row=0, column=0, columnspan=4, padx=5, pady=5, sticky='nsew')
        
        pool_change_frame = self.build_pool_change_frame(newWindow)
        precip_frame = self.build_precip_frame(newWindow)
        weather_frame = self.build_weather_frame(newWindow)
        weather_frame.grid_propagate(0)  # Fixed width to prevent GUI "bouncing"
        temperature_frame = self.build_temperature_frame(newWindow)
        for i, frame in enumerate([pool_change_frame, precip_frame, weather_frame, temperature_frame]):
            frame.grid(row=1, column=i, padx=5, pady=5, sticky='nsew')
        anticipated_frame = self.build_anticipated_frame(newWindow)
        river_stations_frame = self.build_river_stations_frame(newWindow)
        for i, frame in enumerate([anticipated_frame, river_stations_frame]):
            frame.grid(row=2, column=i*2, columnspan=2, padx=5, pady=5, sticky='nsew')
        remarks_frame = self.build_remarks_frame(newWindow)
        remarks_frame.grid(row=3, column=0, columnspan=4, padx=5, pady=5, sticky='nsew')
        cp_plots_frame = self.build_cp_plots_frame(newWindow)
        cp_plots_frame.grid(row=4, column=0, columnspan=4, padx=5, pady=5, sticky='nsew')
        cp_plots_frame.config(background='white')
        header_frame = self.build_header_frame(newWindow)
        header_frame.grid(row=0, column=4, padx=5, sticky='nsew')
        header_frame.config(background='white')
        project_plots_frame = self.build_project_plots_frame(newWindow)
        project_plots_frame.grid(row=1, column=4, rowspan=4, padx=5, pady=5, sticky='nsew')
        self.Load()
        for i in range(self.project['extra_blanks']):
            self.AddGateRow()
    def build_gate_settings_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the gate setting entry fields.
        Default columns include Date, Time, Elevation, and Tailwater. These columns
        are automatically populated using USGS data when possible. Gate setting
        columns are added according to the self.Gate_configuration dictionary. An
        outflow column displays computed values based on a ratings lookup once gate
        settings data is entered.
        Four rows (1200, 1800, 2400, and 0600) are displayed by default. "Add Gate
        Change" and "Remove Gate Change" buttons are provided to add or remove
        rows as needed to account for gate changes outside the four normal times.
        Args:
            parent: The parent frame of the gate_settings_frame.
        """
        lkname = self.lkname
        gate_settings_frame = DlbLabelFrame(parent, 'Gate Settings')
        Label(gate_settings_frame,text ="Date",bg='white').grid(row = 0, column = 0)
        Label(gate_settings_frame,text ="Time",bg='white').grid(row = 0, column = 1)
        Label(gate_settings_frame,text ="Elevation",bg='white').grid(row = 0, column = 2)
        Label(gate_settings_frame,text ="Tailwater",bg='white').grid(row = 0, column = 3)
        r,c = 0,4
        for i in range(len( self.project['gate_configuration'])):
            Label(gate_settings_frame,text=  self.project['gate_configuration'][i]['label'],bg='white').grid(row=r,column=c)
            c+=1
        self.DateF = []
        self.TimeF = []
        self.ElevF = []
        self.TailWaterF = []
        self.Entry_dates = []
        for i in range(30):
            year,month,day,hour,Min,sec,wd,yd,dst = time.gmtime(time.time()-i*60*60*24)
            self.Entry_dates.append(str(month)+'/'+str(day)+'/'+str(year))
        year,month,day,hour,Min,sec,wd,yd,dst = time.gmtime()
        self.TkDate = StringVar(gate_settings_frame)
        self.TkDate.set(str(month)+'/'+str(day)+'/'+str(year))
        self.Date = self.TkDate.get()
        self.TkDate.trace('w', self.Load)
        self.gates = []
        self.FlowL = []
        for j in range(len(  self.project['gate_configuration'])):
            self.gates.append([])
        for i in range(20):
            self.DateF.append(Label(gate_settings_frame,bg='white'))
            self.TimeF.append(Entry(gate_settings_frame, width=10,relief=GROOVE,bd=4))
            self.TimeF[i].bind('<FocusOut>',self.Validate_time)
            self.ElevF.append(Entry(gate_settings_frame, width=10,relief=GROOVE,bd=4))
            self.ElevF[i].bind('<FocusOut>',self.Validate)
            self.TailWaterF.append(Entry(gate_settings_frame, width=10,relief=GROOVE,bd=4))
            self.TailWaterF[i].bind('<FocusOut>',self.Validate)
            for j in range(len(  self.project['gate_configuration'])):
                self.gates[j].append(Entry(gate_settings_frame, width=10,relief=GROOVE,bd=4))
                self.gates[j][i].bind('<FocusOut>',self.Validate)
            self.FlowL.append(Label(gate_settings_frame,bg='white'))
        Label(gate_settings_frame,text="Outflow (cfs)",bg='white').grid(row=0,column=j+5)
        for i in range(j+6):
            gate_settings_frame.columnconfigure(i, minsize=50, weight=1)

        self.gate_buttons_frame = Frame(gate_settings_frame)
        self.gate_buttons_frame.config(background='white')
        
        add_gate_button = Button(self.gate_buttons_frame, text="Add Gate Change", command=self.AddGateRow)
        remove_gate_button = Button(self.gate_buttons_frame, text="Remove Gate Change",command=self.RemoveGateRow)
        add_gate_button.grid(row=0, column=0, padx=(20, 0))
        remove_gate_button.grid(row=0, column=1, padx=(20, 0))

        self.numrows = 0
        for i in range(4):
            self.AddGateRow()
        return gate_settings_frame
        
    def AddGateRow(self):
        """Adds a row of gate setting entry fields in the gate settings frame."""
        if self.numrows < 20:
            self.DateF[self.numrows].grid(row=self.numrows+1,column=0)
            self.TimeF[self.numrows].grid(row=self.numrows+1,column=1)
            self.ElevF[self.numrows].grid(row=self.numrows+1,column=2)
            self.TailWaterF[self.numrows].grid(row=self.numrows+1,column=3)
            for j in range(len(  self.project['gate_configuration'])):
                self.gates[j][self.numrows].grid(row=self.numrows+1,column=j+4)
            self.FlowL[self.numrows].grid(row=self.numrows+1,column=j+5)
            self.gate_buttons_frame.grid(row=self.numrows+2, column=0, columnspan=j+6, pady=(10, 0), sticky='nsew')
            if self.numrows >= 4 and self.Validating:
                self.TimeF[self.numrows].focus_set()
            self.numrows += 1
            self.gate_rows = list(zip(
                self.TimeF,
                self.ElevF,
                self.TailWaterF,
                *self.gates,
            ))
            
    def RemoveGateRow(self):
        if self.numrows > 4:
            self.numrows -= 1
            self.DateF[self.numrows].configure(text='')
            self.TimeF[self.numrows].delete(0,"end")
            self.ElevF[self.numrows].delete(0,"end")
            self.TailWaterF[self.numrows].delete(0,"end")
            self.FlowL[self.numrows].grid_remove()
            self.DateF[self.numrows].grid_remove()
            self.TimeF[self.numrows].grid_remove()
            self.ElevF[self.numrows].grid_remove()
            self.TailWaterF[self.numrows].grid_remove()
            for j in range(len( self.project['gate_configuration'])):
                self.gates[j][self.numrows].delete(0,"end")
                self.gates[j][self.numrows].grid_remove()
            self.FlowL[self.numrows].grid_remove()
            self.gate_buttons_frame.grid(row=self.numrows+2, column=0, columnspan=j+6, pady=(10, 0), sticky='nsew')
            if self.numrows >= 4 and self.Validating:
                self.TimeF[self.numrows].focus_set()
            self.gate_rows = list(zip(
                self.TimeF,
                self.ElevF,
                self.TailWaterF,
                *self.gates,
            ))

    def layout_entry_grid(self, parent: Widget, entry_pairs: List[Tuple[str, Widget]]):
        """Organizes labeled elements into a 2-row horizontal grid.
        Provided elements will be placed on a 2xX grid with labels on the top row
        and widgets on the bottom row.  Label strings will be converted to Label or
        EntryLabel (Message) widgets depending on whether they contain multiple
        words.
        It is assumed that the parent frame will be empty except for the gridded
        objects.  This function will ignore any previously-placed elements.
        However, additional elements may be placed after this function is used.
        Args:
            parent: The frame containing the grid objects.
            entry_pairs: A list of tuples with each tuple representing a label/widget
                pair. Labels should be provided as strings and widgets should be
                provided as the objects themselves.
        """
        for i, (label_text, entry) in enumerate(entry_pairs):
            if ' ' not in label_text:
                label = Label(parent, text=label_text, justify=CENTER,bg='white')
            else:
                label = EntryLabel(parent, label_text,bg='white')
            label.grid(row=0, column=i, sticky="n")
            entry.grid(row=1, column=i, sticky="s")
            parent.columnconfigure(i, minsize=50, weight=1)
        parent.rowconfigure(0, weight=1)

    def build_pool_change_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the 24-hour pool change entry field.
        Args:
            parent: The parent frame of the pool_change_frame.
        """
        pool_change_frame = DlbLabelFrame(parent, 'Pool')
        self.change = Entry(pool_change_frame, width=7,relief=GROOVE,bd=4)
        self.layout_entry_grid(
            pool_change_frame,
            [
                ("24-Hour Change", self.change),
            ]
        )
        return pool_change_frame

    def build_precip_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the precipitation data entry fields.
        Entry fields included in this frame are 24-Hour Depth, Snow On Ground, and
        Snow Water Content.
        Args:
            parent: The parent frame of the precip_frame.
        """
        precip_frame = DlbLabelFrame(parent, 'Precipitation')
        self.precip = Entry(precip_frame, width=7,relief=GROOVE,bd=4)
        self.snow = Entry(precip_frame, width=7,relief=GROOVE,bd=4)
        self.swe = Entry(precip_frame, width=7,relief=GROOVE,bd=4)
        self.layout_entry_grid(
            precip_frame,
            [
                ("24-Hour Depth", self.precip),
                ("Snow On Ground", self.snow),
                ("Snow Water Content", self.swe),
            ]
        )
        for entry in [self.precip, self.snow, self.swe]:
            entry.bind('<FocusOut>', self.Validate)
        return precip_frame

    def build_weather_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the weather data selection box.
        The weather entry is a drop-down selection (OptionMenu) containing the options
        listed in the weather_conditions list object defined within this method.
        Args:
            parent: The parent frame of the weather_frame.
        """
        weather_frame = DlbLabelFrame(parent, 'Weather', width=150)
        self.weather = StringVar(weather_frame)
        self.weather.set('Select Weather')
        weather_conditions = ['Clear','Fair','Hazy','Fog','Partly Cloudy','Cloudy','Drizzle','Light Rain','Rain','Showers','Thunderstorms','Sleet','Freezing Rain','Light Snow','Snow','Blowing Snow','Dust Storm']
        weather_menu = OptionMenu(weather_frame, self.weather, *weather_conditions)
        self.layout_entry_grid(
            weather_frame,
            [
                ("Present Weather", weather_menu),
            ]
        )
        weather_frame.columnconfigure(0, weight=1)
        return weather_frame

    def build_temperature_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the temperature data entry fields.
        Entry fields included in this frame are Current Temperature, Minimum
        Temperature, Maximum Temperature, and Tailwater Temperature.
        Args:
            parent: The parent frame of the temperature_frame.
        """
        temperature_frame = DlbLabelFrame(parent, 'Temperature')
        self.curTemp = Entry(temperature_frame, width=7,relief=GROOVE,bd=4)
        self.maxTemp = Entry(temperature_frame, width=7,relief=GROOVE,bd=4)
        self.minTemp = Entry(temperature_frame, width=7,relief=GROOVE,bd=4)
        self.tailTemp = Entry(temperature_frame, width=7,relief=GROOVE,bd=4)
        deg = u'\N{DEGREE SIGN}'
        self.layout_entry_grid(
            temperature_frame,
            [
                ("Current", self.curTemp),
                ("Max", self.maxTemp),
                ("Min", self.minTemp),
                (f"Tailwater ({deg}C)", self.tailTemp),
            ]
        )
        for entry in [self.curTemp, self.maxTemp, self.minTemp, self.tailTemp]:
            entry.bind('<FocusOut>', self.Validate)
        return temperature_frame

    def build_anticipated_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the anticipated gate setting fields.
        Entry fields are dynamically generated based on the gate configuration
        defined in self.Gate_configuration for the active project.  Once gate
        settings have been provided, the outflow label will display the anticipated
        outflow based on the available gate ratings data.
        Args:
            parent: The parent frame of the ancitipated_frame.
        """
        anticipated_frame = DlbLabelFrame(parent, "Anticipated Settings (Next 0600)")
        gate_pairs = []
        self.a_gates = []
        for i, gate in enumerate(self.project['gate_configuration']):
            label = gate['label']
            entry = Entry(anticipated_frame, width=7,relief=GROOVE,bd=4)
            self.a_gates.append(entry)
            gate_pairs.append((label, entry))
        self.A_FlowL = Label(anticipated_frame,bg='white')
        gate_pairs.append(("Outflow (cfs)", self.A_FlowL))
        self.layout_entry_grid(anticipated_frame, gate_pairs)
        for label, entry in gate_pairs:
            entry.bind('<FocusOut>', self.Validate)
        return anticipated_frame

    def build_river_stations_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the river station stage fields.
        Entry fields are dynamically generated based on the stations defined in
        self.River_Stations for the active project.  Labels are generated for the
        stations listed in self.OtherStations for the active project, with
        corresponding stages displayed based on available USGS data.
        Args:
            parent: The parent frame of the river_stations_frame.
        """
        river_stations_frame = DlbLabelFrame(parent, "River Stations")
        self.r_station = []
        station_pairs = []
        for station in self.project['stations']:
            station_name = station['name']
            if station['entry']:
                entry = Entry(river_stations_frame, width=7,relief=GROOVE,bd=4)
                station_pairs.append((station_name, entry))
                self.r_station.append(entry)
            else:
                mon,day,year = self.Date.split('/')
                datetime_str = year + '-' + pad(mon,2,'0') + '-'+pad(day,2,'0') + ' 06:00'
                try:
                    stage = str(self.Data[station_name][datetime_str])
                except:
                    stage = ""
                stage_label = Label(river_stations_frame, text=stage)
                station_pairs.append((station_name, stage_label))
        self.layout_entry_grid(river_stations_frame, station_pairs)
        return river_stations_frame
    
    def build_remarks_frame(self, parent: Widget):
        """Returns a DlbLabelFrame containing the remarks entry field.
        Args:
            parent: The parent frame of the remarks_frame.
        """
        remarks_frame = DlbLabelFrame(parent, "Remarks")
        remarks_label = Label(remarks_frame, text="Remarks:",bg='white')
        remarks_label.grid(row=0,column=0)
        self.remarks = Entry(remarks_frame, width=77,relief=GROOVE,bd=4)
        self.remarks.grid(row=0, column=1)
        return remarks_frame

    def build_cp_plots_frame(self, parent):
        """Returns a DlbLabelFrame containing the control point plots.
        A standard line plot is generated for each station listed in the
        self.River_Stations and self.OtherStations lists for the active project.
        Plots are arranged horizontally and weighted equally.  If stage limits
        are displayed on plots, rows containing legend labels are added beneath
        the plots row.
        Args:
            parent: The parent frame of the cp_plots_frame.
        """
        print_limits_message = False
        cp_plots_frame = DlbLabelFrame(parent, "Control Point Plots")
        self.cp_plots = []
        for i in range(len(self.project['stations'])):
            station = self.project['stations'][i]['name']
            limits = None
            if 'limits' in self.project['stations'][i].keys():
                limits = self.project['stations'][i]['limits']
                print_limits_message = True
            plot = build_plot(cp_plots_frame, self.Data[station], station, limits)
            self.cp_plots.append(plot.get_tk_widget())
            self.cp_plots[-1].grid(row=0, column=i, padx=5)
            cp_plots_frame.columnconfigure(i, weight=1)
        if print_limits_message:
            wcm_note = "Black (dotted) line: Water Control Manual operational limit.  Flood setting should be used if stage is above this limit and rising unless directed otherwise by Water Management."
            wcm_label = Label(cp_plots_frame, text=wcm_note)
            wcm_label.grid(row=1, column=0, columnspan=len(self.project['stations']))
            nws_note = "Red (dashed) line: National Weather Service flood stage."
            nws_label = Label(cp_plots_frame, text=nws_note)
            nws_label.grid(row=2, column=0, columnspan=len(self.project['stations']))
        cp_plots_frame.rowconfigure(0, weight=1)
        for p in self.cp_plots:
            p.bind("<Button-1>",self.get_web_table)
        return cp_plots_frame
    def get_web_table(self,event):
        index = self.cp_plots.index(event.widget)
        stations = self.project['stations']
        station = stations[index]
        webaddress = 'https://waterdata.usgs.gov/nwis/uv?cb_00060=on&cb_00065=on&format=html&site_no='+station['usgs_id']+'&period=1'
        os.system('start "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" "'+ webaddress +'"')
    def build_header_frame(self, parent):
        """Returns a Frame containing the main header info and controls.
        The header frame contains a Label of the 3-letter code for the active
        project, a date selection box OptionMenu, and a submit Button.
        Args:
            parent: The parent frame of the header_frame.
        """
        header_frame = Frame(parent, padx=5, pady=10)
        project_label = Label(header_frame, text=self.lkname, font=("Arial", 25),bg='white')
        project_label.grid(row=0, column=0, pady=(20, 10))
        helv = tkFont.Font(family='Helvetica', size=18)
        date_dropdown = OptionMenu(header_frame, self.TkDate, *self.Entry_dates)
        date_dropdown.config(font=helv)
        date_dropdown.grid(row=1, column=0, pady=(10, 10))
        self.root.nametowidget(date_dropdown.menuname).config(font=helv)
        submit_button = Button(header_frame, text="Submit", command=self.Submit)
        submit_button.config(width=10, height=1, bg='light blue',font=helv)
        submit_button.grid(row=2, column=0, pady=(10, 10))
        target_elevation = getTargetElevation(self.TkDate.get(),self.lkname,self.project['guide_curve'])
        self.target_label = Label(header_frame, text="Target Elevation: {:10.2f}".format(target_elevation), font=("Arial", 12))
        self.target_label.grid(row=3, column=0, pady=(10, 10))
        header_frame.columnconfigure(0, weight=1)
        return header_frame

    def build_project_plots_frame(self, parent):
        """Returns a DlbLabelFrame containing the elevation and tailwater plots.
        Plots are arranged vertically and weighted equally.
        Args:
            parent: The parent frame of the project_plots_frame.
        """
        project_plots_frame = DlbLabelFrame(parent, "Project Plots")
        elev_plot = build_plot(project_plots_frame, self.Data[self.lkname], f'{self.lkname} Pool Elevation')
        tw_plot = build_plot(project_plots_frame, self.Data['Tailwater'], f'{self.lkname} Tailwater')
        for i, plot in enumerate([elev_plot, tw_plot]):
            plot.get_tk_widget().grid(row=i, column=0)
            project_plots_frame.rowconfigure(i, weight=1)
        project_plots_frame.columnconfigure(0, weight=1)
        return project_plots_frame
        
    def Submit(self):
        """Submit first runs the find_submit_errors function and displays the error if one is found.
        If no errors it itterates through the entry objects to pruduce the output file.
        The output file is then copied and date stamped for archiving
        Finally the send.bat is called to transfer the files to the server."""
        err = self.find_submit_errors()
        try:
            x0,y0,x1,y1 = (self.DateF[0].winfo_rootx(),self.DateF[0].winfo_rooty(),
                self.infobox.winfo_rootx(),
                self.infobox.winfo_rooty())
            print(x0,y0,x1,y1)
            im = ImageGrab.grab(bbox =(x0-25,y0-48,x1,y1+128),all_screens=True)
            im.save(self.directory + '/dlbpy/Captured/'+self.lkname+'.jpg')
            self.infobox.configure(text="Submission Started")
            self.root.update_idletasks()
        except:
            print ("Error in image select")
            im = ImageGrab.grab()
            im.save(self.directory + '/dlbpy/Captured/'+self.lkname+'.jpg')
            self.infobox.configure(text="Submission Started")
            self.root.update_idletasks()
        if err:
            mb.showwarning("Submission Halted Due to Error",err+'\nPlease Correct and resubmit')
            return False
        year,month,day,hour,Min,sec,wd,yd,dst = time.localtime()
        Modtime = str(year)+pad(str(month),2,'0')+pad(str(day),2,'0')+pad(str(hour),2,'0')+pad(str(Min),2,'0')
        basin = GetBasin(self.lkname)
        f = open(self.directory + '/OUTPUT/'+self.lkname+'pydlb.txt','w')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date +' 0000 MODTIME:' + Modtime + '\n')
        f.write('#Lake Levels and Gate Setting\n')
        for i in range(20):
            if self.DateF[i]['text']:
                if self.TimeF[i].get():
                    if self.ElevF[i].get():
                        gatesComplete = True
                        for j in range(len(self.gates)):
                            if self.gates[j][i].get():
                                pass
                            else:
                                gatesComplete = False
                        if gatesComplete:
                            f.write(basin + ' ' + self.lkname + ' ' + self.DateF[i]['text'] + ' ' + self.TimeF[i].get() +' ELEV :' + self.ElevF[i].get() +'\n')
                            if self.TailWaterF[i].get():
                                f.write(basin + ' ' + self.lkname + ' ' + self.DateF[i]['text'] + ' ' + self.TimeF[i].get() +' TAILWATER :' + self.TailWaterF[i].get() +'\n')
                            for j in range(len(self.project['gate_configuration'])):
                                f.write(basin + ' ' + self.lkname + ' ' + self.DateF[i]['text'] + ' ' + self.TimeF[i].get() + ' ' +  self.project['gate_configuration'][j]['shortlabel'] + ' :' + self.gates[j][i].get() + '\n')
        f.write('#Anticipateed and Gate Setting\n')
        for i in range(len(self.a_gates)):
            f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 ' + self.project['gate_configuration'][i]['shortlabel'][:-1] + '_ANTICIPATED_' + self.project['gate_configuration'][i]['shortlabel'][-1] + ' :' + self.a_gates[i].get() + '\n')
        f.write('#Weather\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 CHANGE :' + self.change.get() +'\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 AMTRAIN :' + self.precip.get() +'\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 SNOW :' + self.snow.get() +'\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 SNOWWATER :' + self.swe.get() + '\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 PRESWEATHR :' + self.weather.get() + '\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 AIR :' + self.curTemp.get() + '\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 MAX :' + self.maxTemp.get() + '\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 MIN :' + self.minTemp.get() + '\n')
        if self.tailTemp.get() != '-901':
            f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 WATERTEMP :' + self.tailTemp.get() + '\n')
        f.write('#DownStream Stations\n')
        for i in range(len(self.r_station)):
            if float(self.r_station[i].get()) != 0.0:
                value = self.r_station[i].get()
            else:
                value = "-901"
            if self.project['stations'][i]['entry']:
                f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 ' +  self.project['stations'][i]['name'] + ' :' + value + '\n')
        f.write('#Remarks\n')
        f.write(basin + ' ' + self.lkname + ' ' + self.Date + ' 0600 REMARKS :' + self.remarks.get() + '\n')
        f.flush()
        f.close()
        os.system('copy ' + self.directory + '\\output\\' + self.lkname+'pydlb.txt ' + self.directory + '\\archive\\' +self.lkname+'pydlb'+self.Date.replace('/','-')+'.txt')
        self.infobox.configure(text="Starting Transfer to WM's Server")
        self.root.update_idletasks()
        f2 = open(r'c:\temp\send.txt','w')
        f2.write(r"""option batch abort
option confirm off
lcd c:\temp
open h2ssha09@coe-lrluwa04lrl.lrl.ds.usace.army.mil -privatekey=ssh.ppk -hostkey="ssh-rsa 2048 f5:5b:a1:aa:7a:7a:54:a9:7f:30:08:f5:13:ad:1c:32"
option transfer ascii
lcd o:\ed\public\dlb\output
cd dlbfiles
synchronize remote
close
exit""")
        f2.flush()
        f2.close()
        f3 = open(r"c:\temp\send.bat",'w')
        f3.write(r"""@echo off
net use x: /delete /y
net use x: \\coe-lrldfe01lou\org
copy x:\ed\public\dlb\database\extract\ssh.ppk c:\temp
c:
cd \temp
certutil -hashfile "winscp.exe" > "c:\temp\winscp_exe.hash"
fc c:\temp\winscp_exe.hash x:\ed\public\dlb\database\extract\winscp_exe.hash || copy x:\ed\public\dlb\database\extract\winscp.exe c:\temp\winscp.exe
certutil -hashfile "winscp.com" > "c:\temp\winscp_com.hash"
fc c:\temp\winscp_com.hash x:\ed\public\dlb\database\extract\winscp_com.hash || copy x:\ed\public\dlb\database\extract\winscp.com c:\temp\winscp.com
certutil -hashfile "winscp.ini" > "c:\temp\winscp_ini.hash"
fc c:\temp\winscp_ini.hash x:\ed\public\dlb\database\extract\winscp_ini.hash || copy x:\ed\public\dlb\database\extract\winscp.ini c:\temp\winscp.ini
winscp.com /console /script=send.txt
rm ssh.ppk
""")
        f3.flush()
        f3.close()
        if not self.testmode:
            os.system(r'c:\temp\send.bat')
        self.infobox.configure(text="")
        self.root.update_idletasks()
        path = self.directory + r"\Archive"
        now = time.time()
        for f in os.listdir(path):
            if os.stat(os.path.join(path,f)).st_mtime < now - 30 * 86400:
                os.remove(os.path.join(path,f))
        osh = mb.askyesno(title="DLB Submission Complete", message="Open Screenshot")
        if osh:
            f_name = filedialog.asksaveasfilename(parent=self.root,title='Save DLB Sheet as PDF',initialdir=os.path.expanduser('~')+'\\Documents\\',initialfile=self.lkname+'DLB.pdf',filetypes=[('PDF','.pdf'),],defaultextension=['.pdf'])
            im.save(f_name)
            os.system(f_name)
        return True

    def find_submit_errors(self) -> str:
        """Checks for data entry errors before DLB is processed.
        Returns:
            str: A string containing an error message for the first error discovered,
                or a blank string if no errors are found.
        """
        check_functions = [
            self.check_required_fields,
            self.check_additional_gate_entries,
            self.check_temperature_values,
        ]
        for check_function in check_functions:
            check_error = check_function()
            if check_error:
                return check_error
        return ''

    def check_required_fields(self) -> str:
        """Checks for entered values in every required field.
        Returns:
            str: A string containing an error message listing some or all of the
                missing fields, or a blank string if no required fields are missing.
        """
        i = 0
        for row in self.gate_rows[:4]:  # 1200, 1800, 2400, and 0600
            if not all(entry.get() for entry in row):
                return f'Missing value(s) in gate table at {self.DateF[i]["text"]} on {self.TimeF[i].get()}\nAll gate settings must be filled in.\nPlease fill in missing setting for this row.'
            i += 1
        required_fields = [
            ["24-Hour Pool Change", self.change],
            ["24-Hour Precip", self.precip],
            ["Snow on Ground", self.snow],
            ["Snow Water Content", self.swe],
            ["Current Temperature", self.curTemp],
            ["Min. Temperature", self.minTemp],
            ["Max. Temperature", self.maxTemp],
            ["Tailwater Temperature", self.tailTemp],
        ]
        for i, station in enumerate(self.project['stations']):
            if station['entry']:
                required_fields.append([f"{station['name']} Stage", self.r_station[i]])
        for i, gate in enumerate(self.project['gate_configuration']):
            required_fields.append([f'Ant. {gate["label"]}', self.a_gates[i]])
        missing_fields = [x[0] for x in required_fields if x[1].get() == '']
        if self.weather.get() == 'Select Weather':
            missing_fields.append('Present Weather')
        if float(self.snow.get()) < float(self.swe.get()):
            return f'Snow Water Content cannot be greater than Snow On Ground'
        if missing_fields:
            return f'The following required fields are missing: {missing_fields}'
        return ''

    def check_additional_gate_entries(self) -> str:
        """Checks that all additional gate entry rows have complete data.
        Returns:
            str: A string containing an error message indicating the gate entry row
                containing incomplete data, or a blank string if no incomplete gate
                entry rows are found.
        """
        for i, row in enumerate(self.gate_rows[4:]):
            if any([x.get() for x in row]) and not all(x.get() for x in row):
                return f'Incomplete data entered for gate entry row #{i + 5}'
        return ''

    def check_temperature_values(self) -> str:
        """Checks that temperature values are entered correctly.
        Returns:
            str: A string containing an error message or an empty string if no
                errors are found.
        """
        if float(self.maxTemp.get()) < float(self.minTemp.get()):
            return 'Temp: Min greater than max'
        if not float(self.minTemp.get()) <= float(self.curTemp.get()) <= float(self.maxTemp.get()):
            return 'Temp: Current not between min and max'
        return ''

    def Validate_time(self,event):
        """The time is checked using a regular expression.  If the time is not valid an error is displayed.
        If the time is valid the date for that row is set to the appropreate date"""
        times = ['1200','1800','2400','0600']
        if self.Validating:
            if self.TimeF.index(event.widget) <=3:
                i = self.TimeF.index(event.widget)
                self.TimeF[i].delete(0,'end')
                self.TimeF[i].insert(0,times[i])
            tm = re.compile("([01]?[0-9]|2[0-3])[0-5][0-9]")
            if event.widget.get() != "":
                if tm.match(event.widget.get()):
                    if int(event.widget.get()) > 600:
                        year,month,day,hour,Min,sec,wd,yd,dst = time.gmtime(time.time()-(self.Entry_dates.index(self.Date)+1)*60*60*24)
                        yesterday = str(month)+'/'+str(day)+'/'+str(year)
                        self.DateF[self.TimeF.index(event.widget)].configure(text=yesterday)
                    else:
                        self.DateF[self.TimeF.index(event.widget)].configure(text=self.Date)
                    for i in range(len(self.TimeF)):
                        if self.TimeF[i] != event.widget and pad(event.widget.get(),4,'0') == pad(self.TimeF[i].get(),4,'0'):
                            mb.showwarning("","Times must be unique")
                            event.widget.focus_set()
                            return
                    if event.widget.get() == '2400':
                        mon,day,year = self.Date.split('/')
                        h,m = '00','00'
                    else:
                        mon,day,year = self.DateF[self.TimeF.index(event.widget)]['text'].split('/')
                        h,m = int(int(event.widget.get())/100), int(event.widget.get())%100
                    self.ElevF[self.TimeF.index(event.widget)].delete(0,"end")
                    self.ElevF[self.TimeF.index(event.widget)].insert(0,Interpolate(self.Data[self.lkname],year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' '+pad(str(h),2,'0')+':'+pad(str(m),2,'0')))
                    self.TailWaterF[self.TimeF.index(event.widget)].delete(0,"end")
                    self.TailWaterF[self.TimeF.index(event.widget)].insert(0,Interpolate(self.Data['Tailwater'],year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' '+pad(str(h),2,'0')+':'+pad(str(m),2,'0')))
                else:
                    mb.showwarning("","Time is not in hhmm format")
                    event.widget.focus_set()
            else:
                return

    def Validate(self,event):
        """Values for entry objects are checked against the criteria for their given bounds.
        First the entry object in question is checked against the arrays of objects to establish what type of entry ojbect it is.
        Then the min and max values are set accordingly
        If the value is outside of the bound an error is displayed.
        Finally if the value cannot be evaluated because it isn't the right datatype an error message indicating the value is not a number"""
        if self.Validating:
            try:
                Name = ""
                stop = True
                index = -901
                if not (event.widget.get() == '') and not self.recheck:
                    if event.widget in self.ElevF:
                        min_val, max_val = self.project["elev_limits"]['min'],self.project["elev_limits"]['max']
                        index = self.ElevF.index(event.widget)
                        Name = "Elevation @ " + self.TimeF[index].get()
                        if index == 3:
                            try:
                                mon,day,year = self.DateF[0]['text'].split('/')
                                chg = float(self.ElevF[3].get()) - float(self.Data[self.lkname][year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' 06:00'])
                                self.change.delete(0,"end")
                                self.change.insert(0,str(round(chg,2)))
                            except:
                                pass
                    if event.widget in self.TailWaterF:
                        try:
                            min_val, max_val = 0,float(self.ElevF[self.TailWaterF.index(event.widget)].get())
                        except ValueError:
                            return
                        #min_val, max_val = 0,150
                    for i in range(len(self.project['gate_configuration'])):
                        if event.widget in self.gates[i]:
                            min_val,max_val=float(self.project['gate_configuration'][i]['min']),float(self.project['gate_configuration'][i]['max'])
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'L':
                                if int(event.widget.get()) == 0:
                                    return
                            index = self.gates[i].index(event.widget)
                            Name = self.project['gate_configuration'][i]['shortlabel'] + " @ " + self.TimeF[index].get()
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'M' and not self.project['main_and_bypasses']:
                                try:
                                    if float(event.widget.get()) > 0:
                                        for j in range(len(self.project['gate_configuration'])):
                                            if self.project['gate_configuration'][j]['shortlabel'][0] == 'B' and float(self.gates[j][index].get()) > 0:
                                                self.recheck = True
                                                mb.showwarning("Odd Gate Setting","It's Unusal to have Main Gate and Bypasses both open")
                                except:
                                    pass
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'B' and not self.project['main_gate_levels']:
                                if float(event.widget.get()) == 0.0:
                                    for j in range(len(self.project['gate_configuration'])):
                                        if self.project['gate_configuration'][j]['shortlabel'][0] == 'L':
                                            if self.project['gate_configuration'][j]['shortlabel'][-1] == self.project['gate_configuration'][i]['shortlabel'][-1]:
                                                self.gates[j][index].delete(0,'end')
                                                self.gates[j][index].insert(0,'0')
                                if float(event.widget.get()) > 0:
                                    for j in range(len(self.project['gate_configuration'])):
                                        if self.project['gate_configuration'][j]['shortlabel'][0] == 'M' and not self.project['main_and_bypasses']:
                                            try:
                                                if float(self.gates[j][index].get()) > 0:
                                                    self.recheck = True
                                                    mb.showwarning("Odd Gate Setting","It's Unusal to have Main Gate and Bypasses both open")
                                            except:
                                                pass
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'L':
                                try:
                                    int(event.widget.get())
                                except:
                                    self.recheck = True
                                    mb.showwarning(Name + " Entry Not Valid","Must be an integer")
                                    event.widget.focus_set()
                                    return
                        if event.widget == self.a_gates[i]:
                            index = -1
                            min_val,max_val=float(self.project['gate_configuration'][i]['min']),float(self.project['gate_configuration'][i]['max'])
                            Name = self.project['gate_configuration'][i]['shortlabel'] + " Anticipated"
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'B' and not self.project['main_gate_levels']:
                                if float(event.widget.get()) == 0.0:
                                    for j in range(len(self.project['gate_configuration'])):
                                        if self.project['gate_configuration'][j]['shortlabel'][0] == 'L':
                                            if self.project['gate_configuration'][j]['shortlabel'][-1] == self.project['gate_configuration'][i]['shortlabel'][-1]:
                                                self.a_gates[j].delete(0,'end')
                                                self.a_gates[j].insert(0,'0')
                            if self.project['gate_configuration'][i]['shortlabel'][0] == 'L':
                                try:
                                    int(event.widget.get())
                                except:
                                    self.recheck = True
                                    mb.showwarning(Name + " Not Valid","Must be an integer")
                                    event.widget.focus_set()
                                    return
                    if event.widget in [self.curTemp,self.minTemp,self.maxTemp]:
                        min_val, max_val = -50,130
                    if event.widget == self.curTemp:
                        Name = 'Current Air Temp'
                    if event.widget == self.minTemp:
                        Name = 'Min Air Temp'
                    if event.widget == self.maxTemp:
                        Name = 'Max Air Temp'
                    if event.widget == self.tailTemp:
                        if event.widget.get() == '-901':
                            return
                        else:
                            Name = "Tail Temp"
                            min_val, max_val = 0,50
                    if event.widget in [self.precip,self.snow,self.swe]:
                        min_val, max_val = 0,25
                        stop = False
                    if event.widget == self.precip:
                        Name = "Precipitation"
                    if event.widget == self.snow:
                        Name = "Snow"
                    if event.widget == self.swe:
                        Name = "Snow Water Equivilent"
                        
                    val = float(event.widget.get())
                    if val < min_val:
                        self.recheck = True
                        mb.showwarning(Name +" Not Valid","Value is below normal range.\nPlease Check value.")
                        if stop:
                            event.widget.focus_set()
                        return
                    if val > max_val:
                        self.recheck = True
                        mb.showwarning(Name +" Not Valid","Value is above normal range.\nPlease Check value.")
                        if stop:
                            event.widget.focus_set()
                        return
                else:
                    self.recheck = False
                flow = True
                if index > -1:
                    gates = {}
                    for i in range(len(self.project['gate_configuration'])):
                        if self.gates[i][index].get() == "":
                            flow = False
                        else:
                            if self.project['gate_configuration'][i]['shortlabel'] in ['L1','L2']:
                                gates[self.project['gate_configuration'][i]['shortlabel']] = int(self.gates[i][index].get())
                            else:
                                gates[self.project['gate_configuration'][i]['shortlabel']] = float(self.gates[i][index].get())
                    for key in ['MG1','MG2','BP1','BP2','L1','L2']:
                        if key not in gates.keys():
                            gates[key] = 0
                    if flow:
                        try:
                            self.FlowL[index].configure(text=str(self.flow.get_total_flow(float(self.ElevF[index].get()),gates['MG1'],gates['MG2'],gates['BP1'],gates['BP2'],gates['L1'],gates['L2'])))
                        except:
                            self.FlowL[index].configure(text="Flow Computation Failed")
                flow = True
                if index == -1:
                    gates = {}
                    for i in range(len(self.project['gate_configuration'])):
                        if self.a_gates[i].get() == "":
                            flow = False
                            self.A_FlowL.configure(text='')
                        else:
                            if self.project['gate_configuration'][i]['shortlabel'] in ['L1','L2']:
                                gates[self.project['gate_configuration'][i]['shortlabel']] = int(self.a_gates[i].get())
                            else:
                                gates[self.project['gate_configuration'][i]['shortlabel']] = float(self.a_gates[i].get())
                    for key in ['MG1','MG2','BP1','BP2','L1','L2']:
                        if key not in gates.keys():
                            gates[key] = 0
                    if flow:
                        try:
                            self.A_FlowL.configure(text=str(self.flow.get_total_flow(float(self.ElevF[3].get()),gates['MG1'],gates['MG2'],gates['BP1'],gates['BP2'],gates['L1'],gates['L2'])))
                        except:
                            self.A_FlowL.configure(text="Flow Computation Failed")
            except ValueError:
                mb.showwarning(Name + " Entry Not Valid","Must be a number.")
                self.recheck = True
                event.widget.focus_set()
    def Load(self,*args):
        """Checks for the presence of a date stamped file matching the lake and date.
        Parses the file and populates the entry objects"""
        self.Validating = False
        self.Date = self.TkDate.get()
        target_elevation = getTargetElevation(self.TkDate.get(),self.lkname,self.project['guide_curve'])
        self.target_label.configure(text="Target Elevation: {:10.2f}".format(target_elevation))
        filename = self.directory + '\\archive\\'+self.lkname+'pydlb'+self.Date.replace('/','-')+'.txt'
        self.Clear()
        if exists(filename):
            f = open(filename,'r')
            Times = []
            Gates = []
            lines = f.readlines()
            f.close()
            maxRow,a,r=0,0,0
            for line in lines:
                if line[0] != '#':  #Only Process data lines not comments
                    meta,data = line.split(':')  #Seperate metadata from data
                    meta = meta.split(' ')  #Break meta data into array
                    if meta[4] == 'MODTIME':
                        pass
                    elif meta[4] == 'ELEV':
                        if meta[3] in Times:
                            row = Times.index(meta[3])
                        else:
                            row = maxRow
                            self.DateF[row].configure(text=meta[2])
                            self.TimeF[row].insert(0,meta[3])
                            Times.append(meta[3])
                            maxRow += 1
                        self.ElevF[row].insert(0, data[:-1])
                    elif meta[4] == 'TAILWATER':
                        self.TailWaterF[row].insert(0, data[:-1])
                    elif meta[4] in ['MG1','BP1','L1','MG2','BP2','L2']:
                        if meta[4] in Gates:
                            self.gates[Gates.index(meta[4])][row].delete(0,"end")
                            self.gates[Gates.index(meta[4])][row].insert(0,data[:-1])
                        else:
                            Gates.append(meta[4])
                            self.gates[Gates.index(meta[4])][row].delete(0,"end")
                            self.gates[Gates.index(meta[4])][row].insert(0,data[:-1])
                    elif meta[4].find('_ANTICIPATED_')>0:
                        self.a_gates[a].insert(0,data[:-1])
                        a+=1
                    elif meta[4] == 'CHANGE':
                        self.change.insert(0,data[:-1])
                    elif meta[4] == 'AMTRAIN':
                        self.precip.insert(0,data[:-1])
                    elif meta[4] == 'SNOW':
                        self.snow.insert(0,data[:-1])
                    elif meta[4] == 'SNOWWATER':
                        self.swe.insert(0,data[:-1])
                    elif meta[4] == 'PRESWEATHR':
                        self.weather.set(data[:-1])
                    elif meta[4] == 'AIR':
                        self.curTemp.insert(0,data[:-1])
                    elif meta[4] == 'MAX':
                        self.maxTemp.insert(0,data[:-1])
                    elif meta[4] == 'MIN':
                        self.minTemp.insert(0,data[:-1])
                    elif meta[4] == 'WATERTEMP':
                        self.tailTemp.insert(0,data[:-1])
                    elif meta[4] == 'REMARKS':
                        self.remarks.insert(0,data[:-1])
                    else:
                        self.r_station[r].insert(0,data[:-1])
                        r+=1
            i = 0
            while self.gates[0][i].get() != '':
                if i > (self.numrows-1):
                    self.AddGateRow()
                i+=1
            self.Validating = True
            for i in range(20):
                self.ElevF[i].focus_force()
                self.ElevF[i].event_generate('<FocusOut>')
            self.root.update_idletasks()
            self.a_gates[0].event_generate('<FocusOut>')
        else:
            maxRow = 4
            year,month,day,hour,Min,sec,wd,yd,dst = time.gmtime(time.time()-(self.Entry_dates.index(self.Date)+1)*60*60*24)
            yesterday = str(month)+'/'+str(day)+'/'+str(year)
            dates = [yesterday]*3 +[self.Date]+['']*16
            times = ['1200','1800','2400','0600'] + ['']*16
            for i in range(4):
                self.DateF[i].configure(text=dates[i])
                self.TimeF[i].insert(0,times[i])
                if times[i] == '2400':
                    h,m = '00','00'
                    mon,day,year = self.Date.split('/')
                else:
                    h,m = int(int(times[i])/100), int(times[i])%100
                    mon,day,year = dates[i].split('/')
                try:
                    self.ElevF[i].insert(0,self.Data[self.lkname][year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' '+pad(str(h),2,'0')+':'+pad(str(m),2,'0')])
                except:
                    pass
                try:
                    self.TailWaterF[i].insert(0,self.Data['Tailwater'][year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' '+pad(str(h),2,'0')+':'+pad(str(m),2,'0')])
                except:
                    pass
            mon2,day2,year2 = dates[0].split('/')
            try:
                self.change.insert(0,str(round(self.Data[self.lkname][year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' 06:00'] - self.Data[self.lkname][year2+'-'+pad(mon2,2,'0')+'-'+pad(day2,2,'0') + ' 06:00'],2)))
            except:
                pass
            mon,day,year = self.Date.split('/')
            for i in range(len( self.r_station)):
                self.r_station[i].insert(0,LastGood(self.Data[self.project['stations'][i]['name']],year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' 06:00'))
            try:
                self.tailTemp.insert(0,self.Data['WaterTemp'][year+'-'+pad(mon,2,'0')+'-'+pad(day,2,'0') + ' 06:00'])
            except:
                pass
        while maxRow < self.numrows:
            self.RemoveGateRow()
        self.Validating = True
                    
    def Clear(self):
        """Clears all of the values in the entry objects"""
        for i in range(20):
            self.DateF[i].configure(text='')
            for o in [self.TimeF,self.ElevF,self.TailWaterF]:
                o[i].delete(0,"end")
            self.FlowL[i].configure(text="")
            for j in range(len(self.gates)):
                self.gates[j][i].delete(0,"end")
        for o in [self.change,self.precip,self.snow,self.swe,self.curTemp,self.minTemp,self.maxTemp,self.tailTemp]:
            o.delete(0,"end")
        self.weather.set('Select Weather')
        for i in range(len(  self.project['gate_configuration'])):
            self.a_gates[i].delete(0,"end")
        for i in range(len( self.r_station)):
            self.r_station[i].delete(0,"end")
        self.remarks.delete(0,"end")
if __name__ == "__main__":
        g = gui()
